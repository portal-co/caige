{"mappings":";ACEA,iBAAiB,CAAC,IAAI;IAAE,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAA;CAAE,GAAG;IAAE,KAAK,EAAE,CAAC,CAAA;CAAE,CAAC;AAChE,kBAAkB,CAAC,EAAE,CAAC,SAAS,iBAAiB,OAAO,EAAE,CAAC,CAAC;;IAGvD,IAAI,MAAM,IAAI,CAAC,CAEd;IACD,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAElB;gBAEW,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;QAAE,MAAM,EAAE,CAAC,CAAC;QAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;KAAE;CAI7D;AACD;IACI,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;CACpD;AACD;IACI,IAAI,CAAC,IAAI,EAAE;QAAE,IAAI,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,CAAA;KAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;CAClE;AACD,kCAAkC,EAAE,CAAC;AACrC;;gBAEgB,EAAE,GAAG,EAAE,EAAE;QAAE,GAAG,EAAE,GAAG,CAAA;KAAE;IA2CjC,IAAI,eAAe,SAxCG,mBAAmB,KAAG,CAAC,OAAO,EAAE,oBAAoB,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,OAAO,CAAC,MAAM,CAAC,CA0C7G;CACJ","sources":["js/prompt.ts","js/index.ts","index.ts"],"sourcesContent":[null,null,"import { StandardSchemaV1 } from \"@standard-schema/spec\"\nimport { prompt } from \"./prompt.ts\";\nexport type Kind<T> = { output(value: T): void } | { input: T };\nexport class Slot<T, S extends StandardSchemaV1<unknown, T>> {\n    #schema: S;\n    #kind: Kind<T>;\n    get schema(): S {\n        return this.#schema;\n    }\n    get kind(): Kind<T> {\n        return this.#kind;\n    }\n\n    constructor({ schema, kind }: { schema: S, kind: Kind<T> }) {\n        this.#schema = schema;\n        this.#kind = kind;\n    }\n}\nexport interface LLM {\n    startSession(system: string): Promise<LLMSession>\n}\nexport interface LLMSession {\n    chat(iter: { next(): Promise<string | null> }): Promise<string>\n}\nexport type NaturalFunctionArgs = {};\nexport class LLMPool {\n    #llm: LLM;\n    constructor({ llm }: { llm: LLM }) {\n        this.#llm = llm;\n    }\n    #naturalFunction({ }: NaturalFunctionArgs): (strings: TemplateStringsArray, ...args: any[]) => Promise<string> {\n\n        return async (strings, ...args) => {\n            llmDesiredResponse: for (; ;) {\n                const session = await this.#llm.startSession(prompt({}));\n                let placeholderMode = false;\n                const argsBackup = args;\n                let resp = await session.chat({\n                    async next() {\n                        if (args) {\n                            const str = strings.slice(1).reduce((prev, cur, i) => `${prev}${args[i] instanceof Slot && 'output' in args[i].kind ? `{{placeholder ${placeholderMode = true, i}}}` : args[i]}${cur}`, strings[0]);\n                            args = null;\n                            return str;\n                        } else {\n                            return null;\n                        }\n                    }\n                });\n                if (placeholderMode) {\n                    for (let i = 0; i < argsBackup.length; i++) {\n                        if (args[i] instanceof Slot && 'output' in args[i].kind) {\n                            const placeholder = `{{placeholder ${i}}}:`;\n                            let done = false;\n                            resp = resp.replace(new RegExp(`${placeholder}:([^\\n]*)\\n`), (s, resp) => {\n                                args[i].kind.output(resp);\n                                done = true;\n                                return \"\";\n                            });\n                            if (!done) {\n                                continue llmDesiredResponse;\n                            }\n                        }\n                    }\n                    return resp;\n                } else {\n                    return resp;\n                }\n            }\n        }\n    }\n    get naturalFunction() {\n        return this.#naturalFunction;\n    }\n}"],"names":[],"version":3,"file":"index.d.ts.map"}